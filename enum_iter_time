# Implement the 3 functions belows so the code executes and produces the expected output.
# Do not include any other imports.
# Do not use any Python built-in functions like.
# Is guarenteed to execute to completion.

import time
import random

## YOUR CODE ONLY BELOW HERE
# 1. Implement this function
def enum(iterator):
    #I know I'm missing something here.  I think I have missunder stood this. 
    return(type('enum',(),iterator))
    #pass
    
# 2. Implement this function (a generator)
def stream_objects():
    data = range(1,999)
    dataout = dict()  #initially this was a list of ints, but I was getting a type error
    for i in data:
        dataout[i] = i
    print('Final object was at index', dataout.keys()[-1])  #not an ordered output so at this point I've realized
    #I barked down the wrong tree.
    
    #print(dataout)
    return(dataout)

    #pass
# 3. Implement this function
def timetaken(func):
    start_time =  time.time()
    func()
    end_time = time.time()
    overall_time = end_time - start_time
    return('Run function took', overall_time ,'seconds')
    #pass

    
#not doing any other imports this is quick example of some code I would have also included. (untested)
#import unittest
#class MyTest(unittest.TestCase):
#    test_menum(self):
#        self.assertEqual(enum(1),  int)
#        self.assertFalse(enum('asdf') == int)
    
    
## YOUR CODE ONLY ABOVE HERE


## DO NOT MODIFY ANYTHING BELOW HERE
class Object():
    def __init__(self):
        self.complete = random.random() < 0.2

    def is_complete(self):
        return self.complete

@timetaken
def run():
    for index, current in enum(stream_objects()):
        if current.is_complete():
            return index

print 'Expected output:'
print "Run function took # seconds."
print 'Final object was at index #.'

print 'Actual output:'
final_index = run()
print 'Final object was at index {}'.format(final_index)
